I"œ<p>This week phase 5 of <a href="https://github.com/MrYsLab/telemetrix">Telemetrix</a> 
and the new Python asyncio client, 
<a href="https://github.com/MrYsLab/telemetrix-aio">Telemetrix-AIO,</a>
 were both released.
Phase 5 of Telemetrix retains the original Python API but makes some significant changes
 to both the client and the serverâ€™s internals.</p>

<h1 id="packet-length-added-to-both-command-and-report-packets">Packet Length Added To Both Command and Report Packets</h1>
<p>To simplify adding features to Telemetrix, command and reporter packets now append the packetâ€™s 
length before sending it across the serial link.
Not only does this make debugging more manageable, 
but the size of a packet no longer needs to be maintained by both the client and the server.</p>

<h1 id="support-provided-for-processors-that-contain-a-second-i2c-port-has-been-implemented">Support Provided For Processors That Contain A Second i2c Port Has Been Implemented</h1>
<p>Some processors, such as the STM32 F411CEU6, contain a second i2c port. To turn on
support for those processors, un-comment out the following line in the Telemetrix4Arduino sketch:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>//#define SECOND_I2C_PORT
</code></pre></div></div>
<p>If you are using the second i2c port, you will need to specify which port you wish to use:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>def set_pin_mode_i2c(self, i2c_port=0)

def i2c_read(self, address, register, number_of_bytes,
                 callback=None, i2c_port=0)

def i2c_read_restart_transmission(self, address, register,
                                      number_of_bytes,
                                      callback=None, i2c_port=0)

def _i2c_read_request(self, address, register, number_of_bytes,
                          stop_transmission=True, callback=None, i2c_port=0)

def i2c_write(self, address, args, i2c_port=0)
</code></pre></div></div>
<p>If you are using only the default i2c port, you do not need to specify an i2c port at all.</p>

<p>If you are using the second i2c port, the default pins used for that port are defined in the 
Telemetrix4Arduino sketch.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#define SECOND_I2C_PORT_SDA PB3
#define SECOND_I2C_PORT_SCL PB10
</code></pre></div></div>
<p>These are the pin numbers for the STM32. Redefine these to the pins that are specific to your board.</p>

<h1 id="each-hc-sr04-distance-sensor-has-a-unique-callback">Each HC-SR04 Distance Sensor Has A Unique Callback</h1>
<p>Previously, there was a single shared callback for all HC-SR04 sensors. You may now associate a unique
callback for each HC-SR04 in use.</p>

<h1 id="dht-temperature-sensor-support-put-on-hold">DHT Temperature Sensor Support Put On Hold</h1>
<p>DHT sensor support will be used in an upcoming article to 
demonstrate the procedure used to add library support for both the client and the server.</p>

<h1 id="telemetrix-aio-available-for-download">Telemetrix-AIO Available For Download</h1>

<p>Telemetrix-AIO is a Python asyncio client with a similar API to that of the non-asyncio version.</p>

<p>Why asyncio? Recently I captured a snapshot
of the download statistics from pypi for both the pymata4 (non-asyncio) and pymata-express (asyncio)
libraries, and much to my surprise, pymata-express is being downloaded at a significantly higher
 rate than pymata4.</p>

<p>Here are the rates as of this writing on October 22, 2020:</p>

<h3 id="pymata4">pymata4:</h3>
<p>Total downloads
10,054</p>

<p>Total downloads - 30 days
693</p>

<p>Total downloads - 7 days
232</p>

<h3 id="pymata-express">pymata-express</h3>
<p>Total downloads
37,766</p>

<p>Total downloads - 30 days
5,594</p>

<p>Total downloads - 7 days
1,665</p>

<h1 id="whats-next">Whatâ€™s Next?</h1>
<p>I will be writing the documentation for both Telemetrix and Telemetrix-AIO. Following that,
I will be writing an article on extending both versions using the DHT sensor as an example.
When all that is complete, I will be working on an ESP-8266 version of Telemetrix and Telemetrix-AIO.</p>
:ET